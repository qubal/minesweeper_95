{"version":3,"sources":["types/index.ts","components/number-display/number-display.component.tsx","utils/index.tsx","constants/index.ts","components/button/button.component.tsx","components/app/app.component.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","none","state","open","bombsPlaced","randomRow","floor","random","randomCol","bomb","rowIdx","colIdx","currentCell","numberOfBombs","Button","onClick","onContext","red","visible","onContextMenu","role","aria-label","flagged","App","useState","setCells","smile_face","face","setFace","time","setTime","isLive","setLive","bombCounter","setBombmCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","handleMouseDown","scared_face","handleMouseUp","document","addEventListener","window","removeEventListener","timer","setInterval","clearInterval","lost_face","won_emoji","handleCellClick","newCells","slice","includes","map","cell","openMultipleCells","safeOpenCellsExists","handleCellContext","e","preventDefault","currentCells","key","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02440c80.chunk.js","sourcesContent":["export enum CellValue {\r\n  none,\r\n  one,\r\n  two,\r\n  three,\r\n  four,\r\n  five,\r\n  six,\r\n  seven,\r\n  eight,\r\n  bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  open,\r\n  visible,\r\n  flagged,\r\n}\r\n\r\nexport type Cell = { value: CellValue; state: CellState; red?: boolean };\r\n\r\nexport enum Face {\r\n  smile_face = \"üôÇ\",\r\n  scared_face = \"üò±\",\r\n  lost_face = \"‚ò†Ô∏è\",\r\n  won_emoji = \"üå†\",\r\n}\r\n","import React from \"react\";\r\nimport \"./number-display.styles.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      {value < 0\r\n        ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n        : value.toString().padStart(3, \"0\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import { MAX_COLS, MAX_ROWS, NUMBER_OF_BOBMS } from \"../constants/index\";\r\nimport { Cell, CellValue, CellState } from \"../types/index\";\r\n\r\nconst grabAllAdjacentCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  };\r\n};\r\n\r\nexport const generateCells = () => {\r\n  let cells: Cell[][] = [];\r\n\r\n  //generating cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.none,\r\n        state: CellState.open, //TODO: Make it open\r\n      });\r\n    }\r\n  }\r\n\r\n  //randomly put 10bombs\r\n  let bombsPlaced = 0;\r\n  while (bombsPlaced < NUMBER_OF_BOBMS) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    cells[randomRow][randomCol] = {\r\n      ...cells[randomRow][randomCol],\r\n      value: CellValue.bomb,\r\n    };\r\n    bombsPlaced++;\r\n  }\r\n\r\n  //calculate bombs for each cell\r\n  for (let rowIdx = 0; rowIdx < MAX_ROWS; rowIdx++) {\r\n    for (let colIdx = 0; colIdx < MAX_COLS; colIdx++) {\r\n      const currentCell = cells[rowIdx][colIdx];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n      //pretty shit but it works\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomRightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n      } = grabAllAdjacentCells(cells, rowIdx, colIdx);\r\n\r\n      if (topLeftCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (topCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (topRightCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (leftCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (rightCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomLeftCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomRightCell?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIdx][colIdx] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  const currentCell = cells[rowParam][colParam];\r\n\r\n  if (\r\n    currentCell.state === CellState.visible ||\r\n    currentCell.state === CellState.flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n\r\n  let newCells = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.open &&\r\n    topLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    if (topLeftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\r\n    if (topCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam);\r\n    } else {\r\n      newCells[rowParam - 1][colParam].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.open &&\r\n    topRightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (topRightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\r\n    if (leftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam - 1);\r\n    } else {\r\n      newCells[rowParam][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.open &&\r\n    rightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (rightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam + 1);\r\n    } else {\r\n      newCells[rowParam][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.open &&\r\n    bottomLeftCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomLeftCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.open &&\r\n    bottomCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam);\r\n    } else {\r\n      newCells[rowParam + 1][colParam].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.open &&\r\n    bottomRightCell.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomRightCell.value === CellValue.none) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NUMBER_OF_BOBMS = 10;\r\n","import React from \"react\";\r\n\r\nimport \"./button.styles.scss\";\r\nimport { CellState, CellValue } from \"../../types\";\r\n\r\ninterface ButtonProps {\r\n  row: number;\r\n  col: number;\r\n  red?: boolean;\r\n  state: CellState;\r\n  value: CellValue;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  row,\r\n  col,\r\n  state,\r\n  onClick,\r\n  onContext,\r\n  value,\r\n  red,\r\n}) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role=\"img\" aria-label=\"bomb\">\r\n            üí£\r\n          </span>\r\n        );\r\n      } else if (value === CellValue.none) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"flag\">\r\n          üö©\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Button ${\r\n        state === CellState.visible ? \"visible\" : \"\"\r\n      } value-${value} ${red ? \"red\" : \"\"}`}\r\n      onClick={onClick(row, col)}\r\n      onContextMenu={onContext(row, col)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./app.styles.scss\";\r\n\r\nimport NumberDisplay from \"../number-display/number-display.component\";\r\nimport { generateCells, openMultipleCells } from \"../../utils/index\";\r\nimport Button from \"../button/button.component\";\r\nimport { Cell, Face, CellState, CellValue } from \"../../types/index\";\r\nimport { MAX_ROWS, MAX_COLS } from \"../../constants\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile_face);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [isLive, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombmCounter] = useState<number>(10);\r\n  const [hasLost, setHasLost] = useState<boolean>(false);\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n  //Face changer\r\n  useEffect(() => {\r\n    const handleMouseDown = () => {\r\n      setFace(Face.scared_face);\r\n    };\r\n    const handleMouseUp = () => {\r\n      setFace(Face.smile_face);\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleMouseDown);\r\n    window.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleMouseDown);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  //Timer\r\n  useEffect(() => {\r\n    if (isLive && time < 999) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [isLive, time]);\r\n\r\n  //Loser\r\n  useEffect(() => {\r\n    if (hasLost) {\r\n      setLive(false);\r\n      setFace(Face.lost_face);\r\n    }\r\n  }, [hasLost]);\r\n\r\n  //Winner\r\n  useEffect(() => {\r\n    if (hasWon) {\r\n      setLive(false);\r\n      setFace(Face.won_emoji);\r\n    }\r\n  }, [hasWon]);\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIdx) =>\r\n      row.map((cell, colIdx) => (\r\n        <Button\r\n          key={`Row: ${rowIdx} Col: ${colIdx}`}\r\n          state={cell.state}\r\n          value={cell.value}\r\n          red={cell.red}\r\n          onClick={handleCellClick}\r\n          onContext={handleCellContext}\r\n          row={rowIdx}\r\n          col={colIdx}\r\n        />\r\n      ))\r\n    );\r\n  };\r\n\r\n  const showAllBobms = (): Cell[][] => {\r\n    const currentCells = cells.slice();\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.bomb) {\r\n          return {\r\n            ...cell,\r\n            state: CellState.visible,\r\n          };\r\n        }\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    //starts the game\r\n\r\n    if (!isLive && !hasLost) {\r\n      let newCells = cells.slice();\r\n\r\n      const currentCell = newCells[rowParam][colParam];\r\n\r\n      if ([CellState.flagged, CellState.visible].includes(currentCell.state)) {\r\n        return;\r\n      }\r\n\r\n      if (currentCell.value === CellValue.bomb) {\r\n        setHasLost(true);\r\n        setFace(Face.lost_face);\r\n        newCells[rowParam][colParam].red = true;\r\n        newCells = showAllBobms();\r\n        setCells(newCells);\r\n        return;\r\n      } else if (currentCell.value === CellValue.none) {\r\n        newCells = openMultipleCells(newCells, rowParam, colParam);\r\n      } else {\r\n        newCells[rowParam][colParam].state = CellState.visible;\r\n      }\r\n\r\n      //Check to see if won\r\n      let safeOpenCellsExists = false;\r\n      for (let row = 0; row < MAX_ROWS; row++) {\r\n        for (let col = 0; col < MAX_COLS; col++) {\r\n          const currentCell = newCells[row][col];\r\n\r\n          if (\r\n            currentCell.value !== CellValue.bomb &&\r\n            currentCell.state === CellState.open\r\n          ) {\r\n            safeOpenCellsExists = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!safeOpenCellsExists) {\r\n        newCells = newCells.map((row) =>\r\n          row.map((cell) => {\r\n            if (cell.value === CellValue.bomb) {\r\n              return {\r\n                ...cell,\r\n                state: CellState.flagged,\r\n              };\r\n            }\r\n            return cell;\r\n          })\r\n        );\r\n        setHasWon(true);\r\n      }\r\n\r\n      setCells(newCells);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleCellContext = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (isLive) {\r\n      const currentCells = cells.slice();\r\n      const currentCell = cells[rowParam][colParam];\r\n\r\n      if (currentCell.state === CellState.visible) {\r\n        return;\r\n      } else if (currentCell.state === CellState.open) {\r\n        currentCells[rowParam][colParam].state = CellState.flagged;\r\n        setCells(currentCells);\r\n        setBombmCounter(bombCounter - 1);\r\n      } else if ((currentCell.state = CellState.flagged)) {\r\n        currentCells[rowParam][colParam].state = CellState.open;\r\n        setCells(currentCells);\r\n        setBombmCounter(bombCounter + 1);\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    setLive(false);\r\n    setTime(0);\r\n    setCells(generateCells());\r\n    setHasLost(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"Face\" onClick={handleFaceClick}>\r\n          <span role=\"img\" aria-label=\"face\">\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"Body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/app/app.component\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}